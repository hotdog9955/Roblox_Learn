local criterion = {}

function criterion.mse(p)
	function p.forward(predictions, target)
		p.output_tensor = predictions.copy().sub(target).pow(2.0).sum().scale(1.0 / predictions.size[1])
		p.output = p.output_tensor.data[1]
		return p.output
	end

	function p.backward(predictions, target)
		p.gradInput = predictions.copy().sub(target).scale(2.0 / predictions.size[1])
		return p.gradInput
	end

	return p
end

function criterion.bce(p)
	function p.forward(predictions, target)
		local epsilon = 1e-8
		--p.output_tensor = target.copy().mul(predictions.copy().log()).add(target.copy().comp().mul(predictions.copy().comp().log())).sum().scale(-1/predictions.size[1])
		p.output_tensor = target.copy().mul(predictions.copy().cadd(epsilon).log()).add(target.copy().comp().mul(predictions.copy().comp().cadd(epsilon).log())).sum().scale(-1/predictions.size[1])
		p.output = p.output_tensor.data[1]
		return p.output
	end

	function p.backward(predictions, target)
		local epsilon = 1e-8
		local grad_input = target.copy().div(predictions.copy().cadd(epsilon)).sub(target.copy().comp().div(predictions.copy().cadd(epsilon).comp())).neg()
		p.grad_input = grad_input
		return p.grad_input
	end

	return p
end





return criterion
