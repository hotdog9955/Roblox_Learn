local model = {}
-- i have touched this code, i didn't even know what i did to add biases but it worked. only god knows what i did.
local tensor = require(script.Parent.tensor)
local criterion = require(script.Parent.criterion)

local function normalize(samples)
	local max = 0
	for i, vector in ipairs(samples) do
		for j, v in ipairs(vector) do
			max = math.max(max, math.abs(v))
		end
	end
	if max  > 0 then
		for i, vector in ipairs(samples) do
			for j, v in ipairs(vector) do
				vector[j] = vector[j] / max
			end
		end
	end
	return max
end

local function unormalize(samples, max)
	for i, vector in ipairs(samples) do
		for j, v in ipairs(vector) do
			vector[j] = vector[j] * max
		end
	end
end

function model.nnet(p)
	p.n_input = p.n_input or 1
	p.n_output = p.n_output or 1

	p.criterion = p.criterion or criterion.mse({})

	function p.forward(input)
		for _, mod in ipairs(p.modules) do
			input = mod.forward(input)
		end
		return input
	end

	function p.backward(input, gradients, bgradients)
		for i = #p.modules, 1, -1 do
			input, gradients, bgradients = p.modules[i].backward(input, gradients, bgradients)
		end
	end

	function p.update(input, learning_rate)
		for i, mod in ipairs(p.modules) do
			input = mod.update(input, learning_rate)
		end
	end

	function p.fit(features, labels, epochs, learning_rate, verbose)
		local final_error = 1

		p.feature_max, p.label_max = normalize(features), normalize(labels)

		for e = 1, epochs do
			local error_sum = 0

			for i, input in ipairs(features) do
				input = tensor({data = input})
				local target = tensor({data = labels[i]})

				local output = p.forward(input)

				error_sum = error_sum + p.criterion.forward(output, target)
				local loss = p.criterion.backward(output, target)
				p.backward(input, loss, loss)
				p.update(input, learning_rate)
			end

			final_error = error_sum / #features

			if verbose and (e % (epochs / 10)) == 0 then
				print("Error " .. math.floor(final_error / 0.00001) * 0.00001)
			end
		end

		return final_error
	end

	function p.predict(features)
		local predictions = {}

		for i, feature_vector in ipairs(features) do
			predictions[i] = p.forward(tensor({data = feature_vector})).data
		end

		unormalize(predictions, p.label_max)

		return predictions
	end

	return p
end

return model
